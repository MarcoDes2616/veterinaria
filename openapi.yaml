openapi: 3.0.0
info:
  title: API de Administracion de Clinica Veterinaria
  description: Esta API esta creada para gestionar Clientes y mascotas, Veterinarios y Administradores del sistema.
  version: 1.0.0
  
paths:
  /system/login:
    post:
      summary: Iniciar sesión
      tags:
        - System
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Correo electrónico del usuario
                password:
                  type: string
                  format: password
                  description: Contraseña del usuario
              required:
                - email
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: Identificador único del usuario
                      firstname:
                        type: string
                        description: Nombre del usuario
                      lastname:
                        type: string
                        description: Apellido del usuario
                      email:
                        type: string
                        format: email
                        description: Correo electrónico del usuario
                      passwordChangeAt:
                        type: string
                        format: date-time
                        description: Fecha de cambio de contraseña del usuario
                      profileImgUrl:
                        type: string
                        description: URL de la imagen de perfil del usuario
                      isVerified:
                        type: boolean
                        description: Indica si el correo electrónico del usuario ha sido verificado
                      status:
                        type: boolean
                        description: Indica si la cuenta del usuario está activa
                      roleId:
                        type: integer
                        description: Identificador del rol del usuario
                    required:
                      - id
                      - firstname
                      - lastname
                      - email
                      - isVerified
                      - status
                      - roleId
                  token:
                    type: string
                    description: Token de autenticación del usuario
        '401':
          description: No autorizado
        '404':
          description: No se encontró el recurso solicitado
        '500':
          description: Error interno del servidor
  /system/reset_password:
    post:
      summary: Solicitar cambio de contraseña
      tags:
        - System
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Correo electrónico del usuario
                frontBaseUrl:
                  type: string
                  description: URL base del front-end
              required:
                - email
                - frontBaseUrl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica si la solicitud se procesó correctamente
                required:
                  - success
        '404':
          description: No se encontró el recurso solicitado
  /system/reset_password/{token}:
    put:
      summary: Actualizar contraseña del usuario con el token de restablecimiento de contraseña
      tags:
        - System
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token de restablecimiento de contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: Nueva contraseña del usuario
              required:
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica si la operación se realizó correctamente
                required:
                  - success
        '401':
          description: No autorizado, se requiere autenticación
        '410':
          description: Token de restablecimiento de contraseña expirado
  /system/verify_email/{token}:
    get:
      summary: Verificar el correo electrónico del usuario con el token de verificación
      tags:
        - System
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Token de verificación de correo electrónico
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica si la operación se realizó correctamente
                required:
                  - success
        '401':
          description: No autorizado, se requiere autenticación
        '404':
          description: No se encontró el token de verificación de correo electrónico
        '410':
          description: Token de verificación de correo electrónico expirado
  /system/verify_email:
    post:
      summary: Solicitar el envío de un correo electrónico de verificación
      tags:
        - System
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Dirección de correo electrónico del usuario
                  example: usuario@ejemplo.com
                frontBaseUrl:
                  type: string
                  description: URL base del frontend del usuario
                  example: http://localhost:3000
              required:
                - email
                - frontBaseUrl
      responses:
        '200':
          description: OK
        '404':
          description: No se encontró el correo electrónico del usuario
  /system/users:
    get:
      tags:
        - System
      summary: Obtiene una lista de usuarios clientes
      description: Requiere autorización con un token bearer válido.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - System
      summary: Registra un cliente y su mascota desde un usuario admin
      description: Recibe autenticacion bearer con un token valido del admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: Jose
                lastname:
                  type: string
                  example: Avendaño
                email:
                  type: string
                  format: email
                  example: ecuanovelas2@gmail.com
                name:
                  type: string
                  example: Mimi
                specie:
                  type: string
                  example: Gato
                race:
                  type: string
                  example: Nose
                frontBaseUrl:
                  type: string
                  format: uri
                  example: 'http://localhost:5173/#'
              required:
                - firstname
                - lastname
                - email
                - name
                - specie
                - race
      responses:
        '201':
          description: Usuario y mascota registrados correctamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
      security:
        - bearerAuth: []
  /system/users/{id}:
    get:
      tags:
        - System
      summary: Obtener un usuario por su Id
      description: Requiere autorización con un token bearer válido.
      parameters:
        - name: id
          in: path
          description: User ID to retrieve
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - System
      summary: Activar o desactivar un usuario del sistema
      description: Hace un soft delete al usuario indicado
      parameters:
        - name: id
          in: path
          description: ID del usuario a activar o desactivar
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/me:
    get:
      summary: Obtiene la información del usuario autenticado
      description: requiere autenticacion bearer con token valido.
      tags:
        - System
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/pets:
    get:
      tags:
        - System
      summary: Obtener todas las mascotas
      description: Devuelve un array de objetos de todas las mascotas del sistema
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/pets/{id}:
    get:
      tags:
        - System
      summary: Obtener una mascota por su ID
      description: Devuelve un objeto de una mascota específica del sistema según su ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID de la mascota a buscar
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/specialty:
    get:
      tags:
        - System
      summary: Obtener las especialidades veterinarias
      description: proporciona las especialidades veterinarias disponibles en la clinica
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Medicina interna
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/vet:
    post:
      tags:
        - System
      summary: Crear un nuevo veterinario
      description: Recibe autenticacion bearer con un token valido del admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: Marco
                lastname:
                  type: string
                  example: Cardenas
                email:
                  type: string
                  example: marcoacg1983@gmail.com
                specialty:
                  type: integer
                  example: 3
                frontBaseUrl:
                  type: string
                  example: http://localhost:5173/#
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags:
        - System
      summary: devuelve todos los veterinarios registrados en el sistema
      description: Devuelve un array de objetos de todas las mascotas del sistema
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Veterinarian'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/vet/{id}:
    get:
      tags:
        - System
      summary: Devuelve un objeto de veterinario
      description: Devuelve un el objeto de un veterinario, requiere autorizacion bearer con token de admin
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the veterinarian to retrieve
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Veterinarian'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /system/appointments:
    get:
      tags:
        - System
      summary: Devuelve todas las citas vigentes en el sistema
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID del usuario
        firstname:
          type: string
          description: Nombre del usuario
        lastname:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Email del usuario
        passwordChangeAt:
          type: string
          format: date-time
          nullable: true
          description: Fecha de última actualización de la contraseña
        profileImgUrl:
          type: string
          nullable: true
          description: URL de la imagen de perfil del usuario
        isVerified:
          type: boolean
          description: Indica si el email del usuario ha sido verificado
        status:
          type: boolean
          description: Indica si el usuario está activo o inactivo
        roleId:
          type: integer
          description: ID del rol del usuario
        pets:
          type: array
          items: {}
    Pet:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        birthdate:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female]
        species:
          type: string
        breed:
          type: string
        userId:
          type: integer
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

